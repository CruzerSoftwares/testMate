<?php eval(base64_decode('asddasd'));
function globalLargeLoanReportDownload()
{
    require_once(JPATH_SITE . DS . 'components' . DS . 'com_users' . DS . 'helpers' . DS . 'backurl.php');
    require_once(JPATH_SITE . DS . 'components' . DS . 'com_borrower' . DS . 'helpers' . DS . 'commontasks.php');
    backUrl::validateRequests(['method' => 'POST', 'referer' => true, 'origin' => true, 'user' => ['login' => true]]);
    JSession::checkToken() or die('Invalid Token');
    $config = JFactory::getConfig();
    $authorised = false;
    if (JFactory::getUser()->authorise('core.create', 'com_processor')) {
        $authorised = true;
    }
    if (JFactory::getUser()->authorise('loanofficer.loanpipeline', 'com_loanofficer')) {
        $authorised = true;
    }

    if ($authorised === false) {
        return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));
    }
    require_once(JPATH_SITE . DS . 'plugins' . DS . 'extension' . DS . 'phpexcel' . DS . 'Classes/PHPExcel.php');
    require_once(JPATH_SITE . DS . 'plugins' . DS . 'extension' . DS . 'phpexcel' . DS . 'Classes/PHPExcel/IOFactory.php');
    ini_set('memory_limit', '2048M');
    $config       = JFactory::getConfig();
    $model        = $this->getModel('Processor');
    $app          = JFactory::getApplication();
    $output       = $summary = '';
    $currentMonth = date('m');
    $currentYear  = date('Y');
    $amount       = $amountlast = array();

    if ($currentMonth == 10) {
        $monthsArr = array('10', '11', '12', '01');
        $yearAadd  = true;
    } elseif ($currentMonth == 11) {
        $monthsArr = array('11', '12', '01', '02');
        $yearAadd  = true;
    } elseif ($currentMonth == 12) {
        $monthsArr = array('12', '01', '02', '03');
        $yearAadd  = true;
    } else {
        $monthsArr = array(
            $currentMonth,
            str_pad($currentMonth + 1, 2, 0, STR_PAD_LEFT),
            str_pad($currentMonth + 2, 2, 0, STR_PAD_LEFT),
            str_pad($currentMonth + 3, 2, 0, STR_PAD_LEFT)
        );
        $yearAadd  = false;
    }
    $currentMonthName = date('F');
    $rowNo            = 6;
    $objPHPExcel      = new PHPExcel();
    $objPHPExcel->getProperties()->setCreator("Cupid Platform")
            ->setLastModifiedBy("Cupid Platform")
            ->setTitle("Management Report")
            ->setSubject("Management Report")
            ->setDescription("Management Report, generated by Cupid Platform")
            ->setKeywords("Management Report")
            ->setCategory("Report");

    $objPHPExcel->getDefaultStyle()->getFont()->setName('Calibiri')->setSize(20);
    $objPHPExcel->getActiveSheet()->setCellValue('A' . $rowNo, 'Loan Number');
    $objPHPExcel->getActiveSheet()->setCellValue('B' . $rowNo, 'Submission Date');
    $objPHPExcel->getActiveSheet()->setCellValue('C' . $rowNo, 'Borrower Name');
    $objPHPExcel->getActiveSheet()->setCellValue('D' . $rowNo, 'Client');
    $objPHPExcel->getActiveSheet()->setCellValue('E' . $rowNo, 'Property Type');
    $objPHPExcel->getActiveSheet()->setCellValue('F' . $rowNo, 'Credit Manager');
    $objPHPExcel->getActiveSheet()->setCellValue('G' . $rowNo, 'Relationship Manager');
    $objPHPExcel->getActiveSheet()->setCellValue('H' . $rowNo, 'Purpose');
    $objPHPExcel->getActiveSheet()->setCellValue('I' . $rowNo, 'State');
    $objPHPExcel->getActiveSheet()->setCellValue('J' . $rowNo, 'Loan Pipeline Stage');
    $objPHPExcel->getActiveSheet()->setCellValue('K' . $rowNo, 'Loan Amount $');
    $objPHPExcel->getActiveSheet()->setCellValue('L' . $rowNo, 'CommLoan Commission $');
    $objPHPExcel->getActiveSheet()->setCellValue('M' . $rowNo, 'Estimated Close Of Escrow');
    $nextCol = 'M';

    $loanStatusList = $model->loanStatusList();
    foreach ($loanStatusList as $loanStatus) {
        $loanStatusAr[$loanStatus['statusID']] = $loanStatus['statusName'];
    }

    if (!array_key_exists(10, $loanStatusAr)) {
        $loanStatusAr[10] = 'Loan Cancelled';
    }

    $objPHPExcel->setActiveSheetIndex(0);

    $rowNo = 7;
    $user_typeVar = JRequest::getVar('user_type');
    if ($user_typeVar == 1) {
        $statusCallRunTime = array(0, 6, 1, 2);
    } elseif ($user_typeVar == 2) {
        $statusCallRunTime = array(1, 2);
    }
    foreach ($statusCallRunTime as $dashboardStatus1) {
        $results = $model->globalLoanReportList($dashboardStatus1);
        foreach ($results as $listingborrower) {
            $addedOn = date("m/d/Y", strtotime($listingborrower['addedOn']));
            if ($listingborrower['borrowerEntityName'] != '') {
                $borrower = $listingborrower['borrowerEntityName'];
            } else {
                $applicantPrefix = '';
                if ($listingborrower['applicantPrefix'] != '') {
                    $applicantPrefix = $listingborrower['applicantPrefix'] . " ";
                }
                $borrower = $listingborrower['applicantFname'] . " " . $listingborrower['applicantMname'] . " " . $listingborrower['applicantLname'];
            }

            if ($listingborrower['reviseLoanAmount'] != '') {
                $netLoanAmount = $listingborrower['reviseLoanAmount'];
            } elseif ($listingborrower['loanAmount'] != '') {
                $netLoanAmount = $listingborrower['loanAmount'];
            } else {
                $netLoanAmount = 0;
            }

            //from db
            $commloanPer           = $listingborrower['cmloan_comm_split'];
            $loan_percentage       = number_format($listingborrower['total_comm_per'], 2, '.', '');
            $additional_percentage = number_format($listingborrower['extra_cmloan_comm_per'], 2, '.', '');
            $loan_commission_ori   = $netLoanAmount * $loan_percentage * 0.01;
            $loan_commission       = number_format($loan_commission_ori, 0, '.', '');
            $commloan_percentage   = number_format(($commloanPer * 0.01), 2, '.', '');
            $commloan_commission   = number_format(($loan_commission_ori * $commloanPer * 0.01), 0, '.', '');
            $additional_commission = number_format(($netLoanAmount * $additional_percentage * 0.01), 0, '.', '');
            $total_commission      = number_format(($commloan_commission + $additional_commission), 0, '.', '');
            $commloan_commission1  = number_format(($total_commission), 0, '.', '');
            $closeOfEscrow         = 'N/A';
            $earnestMoneyHardDate  = 'N/A';
            if ($listingborrower['prequalStatus'] == 2) {
                if ($listingborrower['statusDate'] != '' && $listingborrower['statusDate'] != '00/00/0000') {
                    $closeOfEscrow = $listingborrower['statusDate'];
                    //check if closeofescrow is current date+two months later then add to summary
                    $closeOfEscrowAr = explode('/', $closeOfEscrow);
                    $closeOfEscrow = $closeOfEscrowAr[0] . '/' . $closeOfEscrowAr[1] . '/' . $closeOfEscrowAr[2];
                    if (in_array($closeOfEscrowAr[0], $monthsArr) && $closeOfEscrowAr[2] == $currentYear) {//add to summary
                        $amount[$closeOfEscrowAr[0]][] = array('amount' => $netLoanAmount, 'commission' => $commloan_percentage, 'total' => $commloan_commission1);
                    } elseif (in_array($closeOfEscrowAr[0], $monthsArr) && ( $yearAadd == true && $closeOfEscrowAr[2] == $currentYear + 1 )) {//add to summary
                        $amount[$closeOfEscrowAr[0]][] = array('amount' => $netLoanAmount, 'commission' => $commloan_percentage, 'total' => $commloan_commission1);
                    } else {
                        $currentDate = date('Y-m-01');
                        $currentDatestr = strtotime($currentDate);
                        $finalDate = date("Y-m-d", strtotime("+4 month", $currentDatestr));

                        if (strtotime($finalDate) < strtotime($closeOfEscrowAr[2] . '-' . $closeOfEscrowAr[0] . '-' . $closeOfEscrowAr[1])) {
                            $amountlast[$closeOfEscrowAr[0]][] = array('amount' => $netLoanAmount, 'commission' => $commloan_percentage, 'total' => $commloan_commission1);
                        }
                    }
                }
            }
            $prequalStatus = '';
            if ($listingborrower['prequalStatus'] == 0) {
                $prequalStatus = 'Lead';
            } elseif ($listingborrower['prequalStatus'] == 1) {
                $prequalStatus = 'Prequal';
            } elseif ($listingborrower['prequalStatus'] == 2) {
                $prequalStatus = 'Inprocessing';
            } elseif ($listingborrower['prequalStatus'] == 3) {
                $prequalStatus = 'Funded';
            } elseif ($listingborrower['prequalStatus'] == 4) {
                $prequalStatus = 'Cancel';
            } elseif ($listingborrower['prequalStatus'] == 6) {
                $prequalStatus = 'Prospect';
            }
            $objPHPExcel->getActiveSheet()->setCellValue('A' . $rowNo, $listingborrower['loanApplicationID']);
            $objPHPExcel->getActiveSheet()->setCellValue('B' . $rowNo, $addedOn);
            $objPHPExcel->getActiveSheet()->setCellValue('C' . $rowNo, $borrower);
            $objPHPExcel->getActiveSheet()->setCellValue('D' . $rowNo, $listingborrower['orgClientname']);
            $objPHPExcel->getActiveSheet()->setCellValue('E' . $rowNo, $listingborrower["propertyTypeTitle"] == '' ? 'NA' : $listingborrower["propertyTypeTitle"]);
            $loanOfficerName = 'NA';
            if ($listingborrower['firstName'] != '') {
                $loanOfficerName = $listingborrower['firstName'].' '.$listingborrower['lastName'];
            } elseif ($listingborrower['custom_name'] != '') {
                $loanOfficerName = $listingborrower['custom_name'];
            }

            $resionalName = 'NA';
            if ($listingborrower['relationManager'] != '') {
                $resionalName = $listingborrower['relationManager'];
            }

            $objPHPExcel->getActiveSheet()->setCellValue('F' . $rowNo, $loanOfficerName);
            $objPHPExcel->getActiveSheet()->setCellValue('G' . $rowNo, $resionalName);
            $objPHPExcel->getActiveSheet()->setCellValue('H' . $rowNo, $listingborrower['loanPurposeTitle']);
            $objPHPExcel->getActiveSheet()->setCellValue('I' . $rowNo, $listingborrower['s_name']);
            $objPHPExcel->getActiveSheet()->setCellValue('J' . $rowNo, $prequalStatus);
            $objPHPExcel->getActiveSheet()->setCellValue('K' . $rowNo, number_format($netLoanAmount, 0, '.', ''));
            $objPHPExcel->getActiveSheet()->setCellValue('L' . $rowNo, $total_commission);
            $objPHPExcel->getActiveSheet()->setCellValue('M' . $rowNo, $closeOfEscrow);
            $nextCol = 'M';
            $rowNo++;
        }
    }

    switch ($dashboardStatus) {
        case 1:
                $name = "PREQUAL ISSUED";
            break;
        case 2:
                $name = "INPROCESSING";
            break;
        case 3:
                $name = "FUNDED";
            break;
        case 4:
                $name = "CANCELLED";
            break;
        case 6:
                $name = "PROSPECT";
            break;
        case 0:
                $name = "";
            dafault: $name = "GLOBAL LARGE LOAN REPORT";
    }

    $objPHPExcel->getActiveSheet()->setCellValue('A4', $name . ' - ' . date('M d, Y'));
    $objPHPExcel->getActiveSheet()->mergeCells('A1:C2');
    $objPHPExcel->getActiveSheet()->mergeCells('A3:C4');
    $objPHPExcel->getActiveSheet()->getCell('A3')->setValue($name . ' - ' . date('M d, Y'));

    $colHeder = 6;
    for ($i = 'A'; $i <= $nextCol; $i++) {
        $objPHPExcel->getActiveSheet()->getStyle($i . $colHeder)->getFont()->getColor()->setARGB(PHPExcel_Style_Color::COLOR_WHITE);
    }
    $objPHPExcel->getActiveSheet()->getStyle('B7:B12')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_CURRENCY_USD);
    $objPHPExcel->getActiveSheet()->getStyle('D7:D12')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_CURRENCY_USD);

    $autoSizeAr = array('C', 'D', 'E', 'K');
    foreach ($autoSizeAr as $i) {
        $objPHPExcel->getActiveSheet()->getColumnDimension($i)->setAutoSize(true);
    }

    $objPHPExcel->getActiveSheet()->getStyle('A3')->getFont()->setSize(20);
    $objPHPExcel->getActiveSheet()->getStyle('A3')->getFont()->setBold(true);
    $objPHPExcel->getActiveSheet()->getStyle('A3')->getFont()->getColor()->setARGB(PHPExcel_Style_Color::COLOR_BLACK);
    $objPHPExcel->getActiveSheet()->getStyle('K' . ($colHeder + 1) . ':L' . $rowNo)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
    $objPHPExcel->getActiveSheet()->getStyle('K' . ($colHeder + 1) . ':L' . $rowNo)->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_CURRENCY_USD);
    $objPHPExcel->getActiveSheet()->getStyle('L' . ($colHeder + 1) . ':L' . $rowNo)->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_CURRENCY_USD);
    $objPHPExcel->getActiveSheet()->setAutoFilter('A' . $colHeder . ':' . $nextCol . $colHeder);

    $objPHPExcel->getActiveSheet()->getStyle('A' . $colHeder . ':' . $nextCol . $colHeder)->applyFromArray(
        array(
                'font' => array(
                    'bold' => true
                ),
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                ),
                'borders' => array(
                    'top' => array(
                        'style' => PHPExcel_Style_Border::BORDER_THIN
                    )
                ),
                'fill' => array(
                    'type' => PHPExcel_Style_Fill::FILL_SOLID,
                    'rotation' => 90,
                    'startcolor' => array(
                        'argb' => 'FF0000'
                    ),
                    'endcolor' => array(
                        'argb' => 'FF0000'
                    )
                )
            )
    );

    $styleArray = array(
        'borders' => array(
            'allborders' => array(
                'style' => PHPExcel_Style_Border::BORDER_THIN
            )
        )
    );
    $lastRowNo = $objPHPExcel->getActiveSheet()->getHighestRow();
    $objPHPExcel->getActiveSheet()->getStyle(
        'A' . $colHeder . ':' .
            $objPHPExcel->getActiveSheet()->getHighestColumn() .
            ($lastRowNo - 1)
    )->applyFromArray($styleArray);

    $objPHPExcel->getActiveSheet()->getRowDimension('1')->setRowHeight(13);
    $objPHPExcel->getActiveSheet()->getRowDimension('2')->setRowHeight(13);
    $objPHPExcel->getActiveSheet()->getRowDimension('3')->setRowHeight(13);
    $objPHPExcel->getActiveSheet()->getRowDimension('4')->setRowHeight(13);
    $objPHPExcel->getActiveSheet()->getRowDimension('5')->setRowHeight(13);
    $objPHPExcel->getActiveSheet()->getRowDimension($colHeder)->setRowHeight(70);
    $objPHPExcel->getActiveSheet()->getDefaultRowDimension()->setRowHeight(25);

    $objPHPExcel->getActiveSheet()->setCellValue('K' . ($lastRowNo + 2), '=SUM(K' . ($colHeder + 1) . ':K' . ($lastRowNo - 1) . ')');
    $objPHPExcel->getActiveSheet()->setCellValue('L' . ($lastRowNo + 2), '=SUM(L' . ($colHeder + 1) . ':L' . ($lastRowNo - 1) . ')');
    $objPHPExcel->getActiveSheet()->getStyle('K' . ($lastRowNo + 2))->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_CURRENCY_USD);
    $objPHPExcel->getActiveSheet()->getStyle('L' . ($lastRowNo + 2))->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_CURRENCY_USD);

    $borderMedium = array(
        'borders' => array(
            'allborders' => array(
                'style' => PHPExcel_Style_Border::BORDER_MEDIUM
            )
    ));
    $objPHPExcel->getActiveSheet()->getStyle('K' . ($lastRowNo + 2))->applyFromArray($borderMedium);
    $objPHPExcel->getActiveSheet()->getStyle('L' . ($lastRowNo + 2))->applyFromArray($borderMedium);
    $objPHPExcel->getActiveSheet()->getStyle('B' . $colHeder)->getAlignment()->setWrapText(true);
    $objPHPExcel->getActiveSheet()->getStyle('L' . $colHeder)->getAlignment()->setWrapText(true);
    $objPHPExcel->getActiveSheet()->getStyle('H' . $colHeder)->getAlignment()->setWrapText(true);
    $objPHPExcel->getActiveSheet()->getStyle('I' . $colHeder)->getAlignment()->setWrapText(true);
    $objPHPExcel->getActiveSheet()->getStyle('J' . $colHeder)->getAlignment()->setWrapText(true);

    $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
    $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
    $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(14);
    $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
    $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
    $objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(14);
    $objPHPExcel->getActiveSheet()->getColumnDimension('L')->setWidth(15);

    $objDrawing = new PHPExcel_Worksheet_Drawing();
    $objDrawing->setName('Logo');
    $objDrawing->setDescription('Logo');
    $objDrawing->setPath(JPATH_SITE . DS . '/images/logo.png');
    $objDrawing->setHeight(30);
    $objDrawing->setCoordinates('A1');
    $objDrawing->setOffsetX(5);

    $objDrawing->setWorksheet($objPHPExcel->getActiveSheet());

    $objPHPExcel->getActiveSheet()->getHeaderFooter()->setOddHeader('Cupid Platform');
    $objPHPExcel->getActiveSheet()->getHeaderFooter()->setOddFooter('Cupid Platform');
    $objPHPExcel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_PORTRAIT);
    $objPHPExcel->getActiveSheet()->getPageSetup()->setPaperSize(PHPExcel_Worksheet_PageSetup::PAPERSIZE_A4);
    $objPHPExcel->getActiveSheet()->setTitle('Global_Large_Loan_Report');
    $objPHPExcel->setActiveSheetIndex(0);

    $csvfileName = 'GLOBAL_LARGE_LOAN_REPORT_' . date('Y_m_d') . '.xlsx';
    $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
    $objWriter->setPreCalculateFormulas(true);
    $objWriter->setIncludeCharts(true);
    header("Content-Description: File Transfer");
    header("Content-Type:   application/vnd.ms-excel; charset=utf-8");
    header("Content-Disposition: attachment; filename=" . $csvfileName);
    header("Content-Transfer-Encoding: binary");
    header("Expires: 0");
    header("Cache-Control: must-revalidate");
    header("Pragma: public");
    $objWriter->save('php://output');
    exit;
}
